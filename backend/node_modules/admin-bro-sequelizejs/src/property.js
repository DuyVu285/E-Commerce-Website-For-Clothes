const Sequelize = require('sequelize')
const { BaseProperty } = require('admin-bro')

const TYPES_MAPPING = [
  [Sequelize.STRING, 'string'],
  [Sequelize.TEXT, 'string'],
  [Sequelize.INTEGER, 'number'],
  [Sequelize.BIGINT, 'number'],
  [Sequelize.FLOAT, 'float'],
  [Sequelize.REAL, 'float'],
  [Sequelize.DOUBLE, 'float'],
  [Sequelize.DECIMAL, 'float'],
  [Sequelize.DATE, 'datetime'],
  [Sequelize.DATEONLY, 'date'],
  [Sequelize.ENUM, 'string'],
  [Sequelize.ARRAY, 'array'],
  [Sequelize.JSON, 'object'],
  [Sequelize.JSONB, 'object'],
  [Sequelize.BLOB, 'string'],
  [Sequelize.UUID, 'string'],
  [Sequelize.CIDR, 'string'],
  [Sequelize.INET, 'string'],
  [Sequelize.MACADDR, 'string'],
  [Sequelize.RANGE, 'string'],
  [Sequelize.GEOMETRY, 'string'],
]

class Property extends BaseProperty {
  constructor(sequelizePath) {
    super({ path: sequelizePath.field })
    this.sequelizePath = sequelizePath
  }

  name() {
    return this.sequelizePath.field
  }

  isEditable() {
    return !this.sequelizePath._autoGenerated
  }

  isVisible() {
    // fields containing password are hidden by default
    return !this.name().match('password')
  }

  isId() {
    return this.sequelizePath.primaryKey
  }

  type() {
    const key = TYPES_MAPPING.find(element => this.sequelizePath.type instanceof element[0])
    if (!key) {
      console.warn(`Unhandled type: ${this.sequelizePath.type}`)
    }
    const type = key && key[1]
    return type || 'string'
  }
}

module.exports = Property
